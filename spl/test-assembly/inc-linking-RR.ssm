; same as inc-linking, but we now use registers to return values
; Int x = 5
ldc 2 			; This is an integer (boolean = 1, list = 3, tuple = 4?)
sth 			; Data type at 0x7d0
ldc 5
sth 			; Actual value in heap at: 0x7d1

; goto main (last function in our assembly code)
bra main

; the function inc
inc: 	
	link 2 		; reserve space for the local x
	ldml -3 2       ; get x from stack
	stml 1 2	; store x in local var
	ldc 1
	add 		; add 1 by the call value (5)
	str R5
	str RR	
	unlink
	ret

main:
	link 2		; reserve space for the local y
	ldc 5
	ldc 2000
	sta 0
	; to calculate y, we first need inc(x), thus retrieve x from heap
	ldml -2 2	; get location of x from stack
	ldmh 0 2 	; retrieve value and data type of x from heap
	bsr inc 	; call inc
	ldr RR		; push data type of y on stack (result from inc)
	stl 1		; put date type of in local var
	ldr R5		; push value of y on stack (result from inc)
	stl 2		; put value of y in local var	
	ldl 2		; get y for print
	trap 0 		; print y
	unlink

; vim: set filetype=asm:

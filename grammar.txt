VarDecl = Type id "=" Exp ";"

FunDecl = RetType id "(" [ Fargs ] ")" "{" VarDecl* Stmt+ "}"

RetType = "Void"
		| Type
				
Type 	= "Int"
		| "Bool"
		| "(" Type "," Type ")"
		| "[" Type "]"
		| id
		
Fargs 	= Type id [ "," Fargs ]
		
Stmt	= "{" Stmt* "}"
		| "if" "(" Exp ")" Stmt [ "else" Stmt ]
		| "while" "(" Exp ")" Stmt
		| ExpFunc ";"
		| ExpField "=" Exp ";"
		| "return" [ Exp ] ";"
		
Exp 	= ExpOr
ExpOr 	= ExpAnd	("||" ExpAnd)*
ExpAnd 	= ExpEq 	("&&" ExpEq)*
ExpEq 	= ExpCmp 	(("==" | "!=") ExpCmp)*
ExpCmp 	= ExpAdd 	(("<" | "<=" | ">" | ">=") ExpAdd)*
ExpAdd 	= ExpMult 	(("+" | "-") ExpMult)*
ExpMult = ExpCon 	(("*" | "/" | "%") ExpCon)*
ExpCon	= ExpUn 	":" ExpCon
		| ExpUn
ExpUn 	= ("-" | "!") ExpUn
		| ExpBase
ExpBase	= ExpField
		| ExpFunc
		| int
		| bool
		| "[" "]"
		| "(" Exp ")"
		| "(" Exp "," Exp ")"
ExpField  = id (".hd" | ".tl" | ".fst" | ".snd")*
ExpFunc	= id "(" [ ExpArgs ] ")"
ExpArgs	= Exp [ "," ExpArgs ]

--the parser does not use this since the scanner already makes this distinction

int		= digit+
id 		= alpha ("_" | alphaNum)*
bool	= True | False

--design choices:
--we adhere to the binding of operators as defined in C:
--http://en.wikipedia.org/wiki/Operators_in_C_and_C

--list concatenation should bind stronger than plus and minus, because
--1:2 + 3:4 is actually short for 1:2:[] + 3:4:[], which implies 1:2:3:4:[] (and not 1:5:4)